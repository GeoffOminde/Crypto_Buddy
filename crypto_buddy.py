# -*- coding: utf-8 -*-
"""Crypto_Buddy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16vCgd7_TOqiFmUBb1qLahDN9Kelk45jq
"""

# Install necessary libraries (works in Colab/Jupyter only)
!pip install -q requests ipywidgets

# Define chatbot personality and local dataset

print("ü§ñ Hi, I'm CryptoBuddy ‚Äî your first AI-powered financial sidekick! üåü")
print("Disclaimer: ‚ö†Ô∏è Crypto is risky‚Äîalways do your own research before investing!\n")

# Predefined crypto dataset
crypto_db = {
    "Bitcoin": {
        "price_trend": "rising",
        "market_cap": "high",
        "energy_use": "high",
        "sustainability_score": 3/10
    },
    "Ethereum": {
        "price_trend": "stable",
        "market_cap": "high",
        "energy_use": "medium",
        "sustainability_score": 6/10
    },
    "Cardano": {
        "price_trend": "rising",
        "market_cap": "medium",
        "energy_use": "low",
        "sustainability_score": 8/10
    }
}

# Chatbot function with simple rule-based logic
def crypto_advisor(user_query):
    user_query = user_query.lower()

    # Rule 1: Sustainability
    if "sustainable" in user_query:
        recommend = max(crypto_db, key=lambda x: crypto_db[x]["sustainability_score"])
        return f"üå± Invest in {recommend}! It‚Äôs eco-friendly and has long-term potential."

    # Rule 2: Trending / Rising
    if "trending" in user_query or "rising" in user_query:
        trending = [coin for coin, data in crypto_db.items() if data["price_trend"] == "rising"]
        return f"üöÄ Trending up right now: {', '.join(trending)}"

    # Rule 3: Long-term growth
    if "long-term" in user_query or "growth" in user_query:
        growth = [coin for coin, data in crypto_db.items()
                  if data["price_trend"] == "rising" and data["sustainability_score"] >= 0.7]
        if growth:
            return f"üìà For long-term growth, consider {', '.join(growth)} ‚Äî strong sustainability + rising trend!"
        else:
            return "ü§î None look perfect for long-term growth right now."

    # Rule 4: Default response
    return "‚ùì I didn‚Äôt get that. Try asking about sustainability, trends, or growth."

# Example interactions
print("You: Which crypto is trending up?")
print("CryptoBuddy:", crypto_advisor("Which crypto is trending up?"))

print("\nYou: What's the most sustainable coin?")
print("CryptoBuddy:", crypto_advisor("What's the most sustainable coin?"))

print("\nYou: Which crypto should I buy for long-term growth?")
print("CryptoBuddy:", crypto_advisor("Which crypto should I buy for long-term growth?"))

import requests

def get_live_price(coin_id="bitcoin"):
    url = f"https://api.coingecko.com/api/v3/simple/price"
    params = {"ids": coin_id, "vs_currencies": "usd"}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        price = data[coin_id]["usd"]
        return f"üí∞ The current price of {coin_id.capitalize()} is ${price:,}"
    except Exception as e:
        return f"‚ö†Ô∏è Error fetching live price: {e}"

# Test live API
print(get_live_price("bitcoin"))
print(get_live_price("ethereum"))
print(get_live_price("cardano"))

import ipywidgets as widgets
from IPython.display import display

# Text input + button for interactive queries
input_box = widgets.Text(
    description="You:",
    placeholder="Ask me about crypto trends..."
)
output_box = widgets.Output()

def handle_query(sender):
    with output_box:
        print("You:", input_box.value)
        print("CryptoBuddy:", crypto_advisor(input_box.value), "\n")
    input_box.value = ""  # clear after sending

input_box.on_submit(handle_query)
display(input_box, output_box)